/* * Copyright(c) 2007 Mk-10 cellfusion.jp *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, * either express or implied. See the License for the specific language * governing permissions and limitations under the License. */import mx.utils.Delegate;import jp.cellfusion.commands.Command;import jp.cellfusion.commands.ICommand;import jp.cellfusion.commands.events.CommandEvent;class jp.cellfusion.commands.MacroCommand extends Command implements ICommand 
{	private var _commands:Array;	private var _commandProgressDelegate:Function;	private var _commandCompleteDelegate:Function;	private var _endCommand:Number;	/**	 * 登録したコマンドを一気に実行します	 * <pre>	 * // MacroCommand を作成後、add で Command を追加する	 * var mq:MacroCommand = new MacroCommand();	 * mq.add(new TraceCommand("1秒後"));	 * mq.add(new TimerCommand(null, trace, ["1秒後に実行"], 1000, 1));	 * 	 * // 実行	 * mq.execute();	 * 	 * // MacroCommand を作成時に Command を追加する	 * var mq:MacroCommand = new MacroCommand(	 *   new TraceCommand("1秒後"),	 *   new TimerCommand(null, trace, ["1秒後に実行"], 1000, 1)	 * );	 * 	 * // 実行	 * mq.execute();	 * </pre>	 * @param	commands 登録するコマンドの羅列	 */	public function MacroCommand() 
	{		_commandProgressDelegate = Delegate.create(this, this._commandProgressHandler);		_commandCompleteDelegate = Delegate.create(this, this._commandCompleteHandler);				_commands = new Array();		switch (arguments.length) {			case 0:				break;			case 1:				// 一つの場合でも配列ではない場合があるのでインスタンスを確認する				if (arguments[0] instanceof Array) {					var arr:Array = arguments[0];					for (var i:Number = 0;i < arr.length; i++) add(arr[i]);				} else {					add(arguments[0]);				}				break;			default:				for (var i:Number = 0;i < arguments.length; i++) add(arguments[i]);		}	}
	/**	 * コマンドを追加する	 * @param	cmd 追加するコマンド	 */	public function add(cmd:Command):Void	{		if (cmd == null) {			throw new Error("Command がありません");			return;		}				var idx:Number = getItemIndex(_commands, cmd);		if (idx == -1) {			_commands.push(cmd);			cmd.addEventListener(CommandEvent.COMMAND_PROGRESS, _commandProgressDelegate);			cmd.addEventListener(CommandEvent.COMMAND_COMPLETE, _commandCompleteDelegate);		}		else {			throw new Error("同じ command が見つかりました。");		}	}
	/**	 * コマンドを削除する	 * @param	cmd 削除するコマンド	 */	public function remove(cmd:Command):Void	{		if (cmd == null) {			throw new Error("Command がありません");			return;		}				var idx:Number = getItemIndex(_commands, cmd);		if (idx != -1) {			_commands.splice(idx, 1);			cmd.removeEventListener(CommandEvent.COMMAND_PROGRESS, _commandProgressDelegate);			cmd.removeEventListener(CommandEvent.COMMAND_COMPLETE, _commandCompleteDelegate);		}		else {			throw new Error("commandが見つかりませんでした。");		}	}
	/**	 * 登録した関数を実行	 */	public function execute():Void 
	{		_endCommand = 0;		for (var i = 0;i < _commands.length; i++) {			var rslt:Object = _commands[i].execute();		}	}
	/**	 * 中断する	 */	public function abort():Void 
	{		for (var i:Number = 0;i < _commands.length; i++) {			_commands[i].abort();		}	}
	/**	 * 再開する	 */	public function resume():Void 
	{		for (var i:Number = 0;i < _commands.length; i++) {			_commands[i].resume();		}	}
	/**	 * 	 */	public function clone():ICommand 
	{		return new MacroCommand(_commands);	}
	public function toString():String	{		return "[object MacroCommand]";	}
	private function _commandProgressHandler(e:CommandEvent) 
	{		dispatchEvent(new CommandEvent(CommandEvent.COMMAND_PROGRESS, this));	}
	private function _commandCompleteHandler(e:CommandEvent) 
	{		// 終了した Command の数と登録されている Command の数が一致したらイベントを発行する		if (++_endCommand == _commands.length) {			dispatchEvent(new CommandEvent(CommandEvent.COMMAND_COMPLETE, this));		}	}}